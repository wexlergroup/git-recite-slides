---
title: "Basic Version Control with `Git`"
subtitle: "<https://yangmr04.github.io/git-recite-slides/>"
author: "Ray Yang"
format: revealjs
  # revealjs:
    # logo: logo.png
    # footer: ""
---

## What is version control

Version control (also known as revision control, source control, and source code management) is the software engineering practice of controlling computer files and versions of files; primarily source code text files, but generally any type of file. ^[<https://en.wikipedia.org/wiki/Version_control>]

. . .

- it's a concept, and `Git` is a software
- and [GitHub](https://github.com/) is a platform/host/server...

## What is `Git`

- it's a software
- it's free and open source
- it's the  *de facto* standard version control system but there are many more (both open and proprietary)
- it's independent of network access or a central server


## What is [GitHub](https://github.com/)?

- it's a platform/host/server...
- it's free but **NOT** open source
- it's owned by Microsoft since 2018
- there are many others, e.g., [Bitbucket](https://bitbucket.org/product), [GitLab](https://about.gitlab.com)

## The components

There are the local parts and the server part. Typically, you interact with all parts through the command line interface (CLI), which contains a set of text-based instructions.

Nowadays, there are graphical user interfaces (GUIs) available for your convenience. Many integrated development environments (IDEs) also have integrated git functionalities, either built-in ot via plug-ins.


## The direction of version control: `pull`
```{dot}
digraph A {
  rankdir=LR;
  edge [ style=dashed ];

  // node [ fontname="Handlee" ];
  subgraph cluster_frontend {
    label="Your Laptop";
    "local files" -> "staging area" -> "local repo" [dir=back];
  }
      
  subgraph cluster_backend {
    
    label="The Internet (origin/remote)";
    "online repo";
  }

  "local repo" -> "online repo" [dir=back];
  
}
```

<span style="font-size:0.5em;">Repo: repository</span>

## The direction of version control: `push`

```{dot}
digraph B {
  rankdir=LR;
  edge [ style=dashed ];

  // node [ fontname="Handlee" ];
  subgraph cluster_frontend {
    label="Your Laptop";
    "local files" ->"staging area" -> "local repo";
  }
      
  subgraph cluster_backend {
    
    label="The Internet (origin/remote)";
    "online repo";
  }

  "local repo" -> "online repo";
  
}
```

<span style="font-size:0.5em;">Repo: repository</span>

## Useful resources

- Atlassian Git Tutorials <https://www.atlassian.com/git/tutorials>
- Software Carpentry, Version Control with Git <https://swcarpentry.github.io/git-novice/>
- Git documentation  <https://git-scm.com/docs>

## Example

<https://github.com/wexlergroup/FreeBird.jl>

# Commands

## Setting up a repository

- `git init`: tell git to set up version control

```bash
cd /path/to/your/existing/code 
git init
```
Or, when outside a directory, use
```bash
git init <project directory>
```

<span style="font-size:0.5em;"> - Directory: a "folder" equivalent in CLI</span>


## Cloning an existing repository

- `git clone`: copy, or "clone" a repo from a server
```bash
git clone https://github.com/your_github_username/your_repo
```

## To update a repo locally

- `git pull`: you *pull* the updates from the server
```bash
git pull
Already up to date.
```  


Always try `pull` before making any changes to stay up-to-date with the origin, and avoid *merge conflicts*.

## Inspecting a repository

- `git status`: check the status of the current repo
```bash
git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   docs/index.html
        modified:   index.qmd

no changes added to commit (use "git add" and/or "git commit -a")
```

## Start tracking

- `git add`: to stage the changes
```bash
git add <file_name>
```
several options:
```bash
git add -A    # stage all changes: new, modified and deleted files
git add .     # stage new and modified files
git add -u    # stage modified and deleted files
```

## To stage the changes
- `git commit`: to commit the changes staged with `git add`
```bash
git commit -m "some text for the commit message"
```

## To upload with the server
- `git push`: to `push` your changes to the `origin`
```bash
git push
```